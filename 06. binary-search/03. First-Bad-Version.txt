# step 1 : define a high and low pointer
# step 2 : iterate id low < high
# step 3 : compute its middle version by (low + high) // 2
# step 4 : if the version is bad, update high = middle
# step 5 : if the version id good, update low = mid + 1
# step 6 : return low since it will be the very first bad version

# The isBadVersion API is already defined for you.
# def isBadVersion(version: int) -> bool:

class Solution:
    def firstBadVersion(self, n: int) -> int:
        low = 1
        high = n

        while low < high:
            mid = (low + high) // 2
            if isBadVersion(mid):
                high = mid
            else:
                low = mid + 1
        return low


