step 1 : define hasSameTree to check if current node has the same structure as target node
step 2 : define subTree to check if current node has the same structure as target node ot to check same structure in left or right node

class Solution:
    def isSubtree(self, root: Optional[TreeNode], subRoot: Optional[TreeNode]) -> bool:
        def hasSameTree(p, q):
            if p is None and q is None:
                return True
            elif (p is None and q is not None) or (p is not None and q is None):
                return False
            elif p.val != q.val:
                return False

            return hasSameTree(p.left, q.left) and hasSameTree(p.right, q.right)
        
        def subTree(root, subRoot):
            if root is None:
                return False
            if hasSameTree(root, subRoot):
                return True
            return subTree(root.left, subRoot) or subTree(root.right, subRoot)

        return subTree(root, subRoot) 