# step 1 : define a diameter variable to store the highest value of diameter from each TreeNode
# step 2 : define a height function
# step 3 : inside the height function, if current node is empty return 0
# step 4 : calculate of each left height and right height by traversing root.left and root.right to check each node
# step 5 : update the diameter of the trees
# step 6 : return max(left_height, right height) + 1 to keep track of the height
# step 7 : call the height function
# step 8 : return the diameter,

class Solution:
    def diameterOfBinaryTree(self, root: Optional[TreeNode]) -> int:
        self.diameter = 0
        def height(root):
            if root is None:
                return 0
            left_height = height(root.left)
            right_height = height(root.right)
            self.diameter = max(self.diameter, left_height + right_height)

            return max(left_height, right_height) + 1
        height(root)
        return self.diameter

