step 1 : initailize result variable to store each value of the tree node for each level
step 2 : if root is None then return []
step 3 : if rooy not none then add root to queue variable
step 4 : repeat until queue is empty
step 5 : initialize level to store each children value from parent node
step 6 : initialize level length to iterate from each queue
step 7 : if curent node has node.left or node.right, append to queue
step 8 : after finishing the 2nd loop append level to result
step 9 : by the end of the loop from while queue, return result
class Solution:
    def levelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:
        result = []
        if root is None:
            return result
        queue = deque([root])
        while queue:
            level = []
            level_len = len(queue)
            for _ in range(level_len):
                node = queue.popleft()
                level.append(node.val)
                if node.left:
                    queue.append(node.left)
                if node.right:
                    queue.append(node.right)
            result.append(level)
        return result