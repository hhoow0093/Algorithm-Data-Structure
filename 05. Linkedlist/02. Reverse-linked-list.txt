# step 1 :  initialize an empty node with node variable
# step 2 :  create a temp variable which forwards from the head
# step 3 :  iterate until temp is empty
            - move head.next to node
            - move node to head
            - move head to temp
            - move temp by 1


# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:
        if head is None:
            return None
        
        node = None
        temp = head.next
        while temp:
            head.next = node
            node = head
            head = temp
            temp = temp.next

        head.next = node
        return  head
        


        